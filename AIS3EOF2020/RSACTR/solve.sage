def long_to_bytes(data):
    data = str(hex(long(data)))[2:-1]
    return "".join([chr(int(data[i:i + 2], 16)) for i in range(0, len(data), 2)])
    
def coppersmith(N,e,known_m,c):
    P.<x> = PolynomialRing(Zmod(N), implementation='NTL')
    pol = (known_m + x)^e - c
    roots = pol.small_roots(epsilon=1/32)
    return roots

N = 85172141477203096854210309726028714375038765745965164887561351768499686264451192275556072323485697656101397980278801980849106160164612373806323709311263532465104575612073496695024375147705917479308449640684830018971468534187606736710705696689353392191996367246485483385274478124347819787256700411291277650091
e = 3
nonce = pow(0x306928b7333f33fda4e7563a9d6430a686870cd5afdc07b5b463071fe513df36a69172f12035efe2d7fe0f3fc7388d8ed93b6167503af1ece83f1e914fa58f118eb37e65d76d58de6cecc47ab7c1f688b0009818fb206d9e6431d794c9f8881339d632eced27f2a2fa8e6730c754b71a7b4100f05bd65d6e74376b7b3b4a7ab3,e,N)
flag = '5aea45fb3bdee1d80859283230b8b1a21b1c8d513be4438bb1585c0ca91699dc1760de1ae21fd1b3c15ee752861a1224004d34aadcb28919941ae7fbc96df49c43615da70b2e93ea23f25a898ff46f7b33766bb1be32c9f61d42c2b3cc71051ad4f7dcc8fa4fe9c2ff76c6d817df9f38d1de50eb76c043121e44df4673d63ec825e05b075d79328e2968b57b7ba0e60734d7593cc8da822d4f089ff80af43a699079e9605564d336bffd1e93f752bc64b142782b65457a5bcb2a4f724912be9a17e1f4eed03fb2de0d949ace8d0541ecd889c2d86b85029f54572ec68d47c33a1cf2f6dd88cba2428f5da4a9a2c349ac88f394c6875f0e968a17b935160e5a1c739f189ec965fc36ca546c1b0cb7593ef4309c4718cace5c8a5c366437eae5d00525f5084c5a55ba357132b2cbaa18b9adb7b565570d6cb37e16fc79c75a318458dc82557d663387df38c981cb6b5f1d4dff5ea6f632b56b58f855bc07044185262b83e3e36b597803391ae9410cad839147243c422e33a9a2a1260322209680'

for i in range(0, len(flag)//256) :
    known_m = int(flag[i*256:i*256+256],16)
    root = coppersmith(N,e,known_m,nonce+2020*(i+1))
    print(long_to_bytes(N - root[0]))
    
# FLAG{dIdyousolVEITWIthCoppERsmith}